Resources:
  TestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: StorageName
          AttributeType: S
        - AttributeName: DataName
          AttributeType: S
      KeySchema:
        - AttributeName: StorageName
          KeyType: HASH
        - AttributeName: DataName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        #StreamViewType: KEYS_ONLY
        StreamViewType: NEW_IMAGE

  LambdaPutRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            Fn::Join: [ "-", [ Ref: "AWS::StackName", Put, Policy ] ]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "table/", Ref: TestTable ] ]

  LambdaStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            Fn::Join: [ "-", [ Ref: "AWS::StackName", Stream, Policy ] ]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBStreamAccess
                Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                Resource:
                  - Fn::GetAtt: [ TestTable, StreamArn ]
              - Sid: DynamoDBStreamsAccess
                Effect: Allow
                Action:
                  - dynamodb:ListStreams
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "table/", Ref: TestTable, "/stream/*" ] ]


  PutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: ${self:custom.config.retentionInDays}
  StreamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: ${self:custom.config.retentionInDays}

Outputs:
  TableName:
    Value:
      Ref: TestTable
